# =============================================================================
# Multi-stage Dockerfile for ROS2 Humble + Gazebo Classic with VNC GUI access
# =============================================================================
# This Dockerfile creates a containerized environment for robotics development
# with ROS2, Gazebo simulation, and remote GUI access via VNC.
#
# Architecture:
# - Stage 0 (base): CUDA-enabled Ubuntu with KDE Plasma desktop and VNC server
# - Stage 1 (ros): ROS2 Humble installation with Gazebo Classic integration  
# - Stage 2 (final): User setup, configuration files, and VNC customization
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 0: Base system with CUDA support and desktop environment
# -----------------------------------------------------------------------------
FROM nvidia/cuda:12.3.2-base-ubuntu22.04

# Prevent interactive prompts during package installation
# Essential for automated Docker builds
ENV DEBIAN_FRONTEND=noninteractive

# Install complete desktop environment and VNC server components
# - kde-plasma-desktop: Full KDE Plasma desktop environment for GUI applications
# - konsole: Terminal emulator integrated with KDE
# - plasma-workspace: Core Plasma shell and workspace components
# - kwin-x11: KDE window manager for X11 (essential for window management)
# - xvfb: Virtual framebuffer X server for headless operation
# - tigervnc-*: VNC server implementation for remote desktop access
# - tightvncserver: Additional VNC tools (provides vncpasswd utility)
# - dbus-x11: D-Bus session bus for desktop application communication
# - sudo: Allow non-root users to execute privileged commands
RUN apt-get update && apt-get install -y --no-install-recommends \
      kde-plasma-desktop konsole plasma-workspace kwin-x11 \
      xvfb \
      tigervnc-standalone-server tigervnc-common tightvncserver \
      dbus-x11 sudo \
    && rm -rf /var/lib/apt/lists/*

# Set ROS2 distribution version as environment variable for consistency
ENV ROS_DISTRO=humble

# Add the official ROS2 apt repository to package sources
# - gnupg2, lsb-release, curl: Required for repository key verification
# - Downloads and adds ROS2 GPG key for package authentication
# - Adds ROS2 repository URL to apt sources for the current Ubuntu release
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      gnupg2 lsb-release curl \
    && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
         | apt-key add - \
    && echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
         > /etc/apt/sources.list.d/ros2.list

# Install ROS2 desktop meta-package and build tools
# - ros-humble-desktop: Complete ROS2 installation with GUI tools (RViz, rqt, etc.)
# - ros-humble-mavros, ros-humble-mavros-msgs: MAVLink integration packages for autopilot communication
# - python3-rosdep2: Dependency management tool for ROS packages
# - python3-colcon-common-extensions: Build system for ROS2 workspaces
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      ros-${ROS_DISTRO}-desktop \
      ros-${ROS_DISTRO}-mavros ros-${ROS_DISTRO}-mavros-msgs \
      python3-rosdep2 python3-colcon-common-extensions \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep database for dependency resolution
# - rosdep init: Creates system-wide rosdep configuration (may fail if already exists)
# - rosdep update: Downloads package dependency database
RUN rosdep init || true && \
    rosdep update
